/*Example 1:

Input: N = 4, a[] = {3, 4, 5, 3}, K = 6
Output: 15
Explanation: The worst case scenario, after 
14 picks will be 3,3,3,3 or 3,1,5,3 where 
each number represents picks of socks of 
one colour. Hence, 15th pick will get the 
5th pair for sure.

Example 2:

Input: N = 2, a[] = {4, 6}, K = 3
Output: 7
Explanation: The Worst case scenario after 6 
picks can be 3,3 or 1,5 or 5,1 of each 
coloured socks. Hence 7th pick will ensure 
3rd pair. 
Your Task:  
You don't need to read input or print anything. Complete the function find_min() which takes the array a[], size of array N, and value K as input parameters and returns the minimum number of socks Tony has to pick. If it is not possible to pick then return -1.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 105 
1 ≤ a[i] ≤ 106
*/

class Solution{

	public:
	int find_min(int a[], int n, int k) {
        // Your code geos here
        int i,s=0,no=0,t=0;
        for(i=0;i<n;i++){
            if((a[i]%2)!=0){
                s=s+a[i]-1;
                t+=(a[i]-1)/2;
            }
            else{
                s=s+a[i];
                t+=(a[i]-2)/2;
      
            }
        }
        if(s<2*k)
            return -1;
    
    
        if (k <= t)
            return (2 * (k-1) + n + 1);
        
        return (2 * t + n + (k - t));
        
        
    }

};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        cin >> k;
        Solution obj;
        cout << obj.find_min(a, n, k) << endl;
    }
    return 1;
}
  // } Driver Code Ends
